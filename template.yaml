#sam build && sam deploy --parameter-overrides $(cat .sam-params)

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for journal app

Globals:
  Function:
    MemorySize: 128
    Timeout: 60
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type,x-api-key'"
      AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"

Parameters:
  SubdomainParam:
    Type: String
    Description: The subdomain
  HostedZoneIDParam:
    Type: String
    Description: The hosted zone ID

Resources:
  CreateJournalEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/journal-app-code/
      Handler: create_journal_entry.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref JournalEntriesDDBTable
        - S3WritePolicy:
            BucketName: !Ref JournalWebsiteS3Bucket
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          JOURNAL_DDB_TABLE: !Ref JournalEntriesDDBTable
          JOURNAL_S3_BUCKET: !Ref JournalWebsiteS3Bucket
      Events:
        JournalEntryAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref JournalEntryApi
            Path: /entries/
            Method: post
            Auth:
              ApiKeyRequired: true

  JournalEntryApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false

  JournalEntryApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true

  JournalEntryUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: "JournalEntryApiProdStage"
    Properties:
      ApiStages:
        - ApiId: !Ref JournalEntryApi
          Stage: "Prod"

  JournalEntryUsagePlanKeyAssocation:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref JournalEntryApiKey
      KeyType: "API_KEY"
      UsagePlanId: !Ref JournalEntryUsagePlan

  ReadJournalEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/journal-app-code/
      Handler: read_journal_entry.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JournalEntriesDDBTable
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          JOURNAL_DDB_TABLE: !Ref JournalEntriesDDBTable
      Events:
        JournalEntryAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref JournalEntryApi
            Path: /entries/
            Method: get
            Auth:
              ApiKeyRequired: true

  DeleteJournalEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/journal-app-code/
      Handler: delete_journal_entry.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref JournalEntriesDDBTable
        - S3CrudPolicy:
            BucketName: !Ref JournalWebsiteS3Bucket
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          JOURNAL_DDB_TABLE: !Ref JournalEntriesDDBTable
          JOURNAL_S3_BUCKET: !Ref JournalWebsiteS3Bucket
      Events:
        JournalEntryAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref JournalEntryApi
            Path: /entries/
            Method: delete
            Auth:
              ApiKeyRequired: true

  UpdateJournalEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/journal-app-code/
      Handler: update_journal_entry.lambda_handler
      Runtime: python3.8
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref JournalEntriesDDBTable
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          JOURNAL_DDB_TABLE: !Ref JournalEntriesDDBTable
      Events:
        JournalEntryAPIEvent:
          Type: Api
          Properties:
            RestApiId: !Ref JournalEntryApi
            Path: /entries/
            Method: put
            Auth:
              ApiKeyRequired: true

  JournalEntriesDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PK1"
          AttributeType: "S"
        - AttributeName: "SK1"
          AttributeType: "S"
        - AttributeName: "GSI1PK"
          AttributeType: "S"
        - AttributeName: "GSI1SK"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
        - AttributeName: "PK1"
          KeyType: "HASH"
        - AttributeName: "SK1"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: "GSI1PK"
              KeyType: "HASH"
            - AttributeName: "GSI1SK"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DependenciesLayer
      Description: Journal Dependencies
      ContentUri: src/
      CompatibleRuntimes:
        - python3.7
        - python3.8
      LicenseInfo: MIT
      RetentionPolicy: Retain

  JournalWebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
              - "x-amz-*"
            AllowedMethods:
              - GET
              - PUT
              - DELETE
              - POST
            AllowedOrigins:
              - "*"
            ExposedHeaders:
              - Connection
              - Server
              - Date
            Id: myCORSRuleId1
            MaxAge: 3600
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  JournalWebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JournalWebsiteS3Bucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt JournalCloudFrontOAI.S3CanonicalUserId
            Resource:
              !Join ["", ["arn:aws:s3:::", !Ref "JournalWebsiteS3Bucket", /*]]

  JournalCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt JournalWebsiteS3Bucket.DomainName
            Id: myS3Origin
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  "",
                  [
                    "origin-access-identity/cloudfront/",
                    !Ref JournalCloudFrontOAI,
                  ],
                ]
        Enabled: "true"
        Comment: !Ref SubdomainParam
        DefaultRootObject: index.html
        Aliases:
          - !Ref SubdomainParam
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: myS3Origin
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: true
              LambdaFunctionARN: !Ref DistributionAuthorizer.Version
        ViewerCertificate:
          AcmCertificateArn: !Ref JournalACMCertificate
          #CloudFrontDefaultCertificate: Boolean
          #IamCertificateId: String
          MinimumProtocolVersion: "TLSv1"
          SslSupportMethod: "sni-only"

  JournalCloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref SubdomainParam

  JournalACMCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref SubdomainParam
      DomainValidationOptions:
        - DomainName: !Ref SubdomainParam
          HostedZoneId: !Ref HostedZoneIDParam
      ValidationMethod: DNS

  Route53RecordSet:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HostedZoneIDParam
      RecordSets:
        - Name: !Ref SubdomainParam
          Type: A
          AliasTarget:
            # Note: This HostedZoneID is always used for every CF distribution so it can be hard-coded in
            HostedZoneId: "Z2FDTNDATAQYW2"
            DNSName: !GetAtt JournalCloudFrontDistribution.DomainName

  DistributionAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      CodeUri: ./src/distribution
      Handler: authorizer.lambda_handler
      Role: !GetAtt DistributionAuthorizerRole.Arn
      MemorySize: 128 # Max for viewer-request
      Timeout: 5 # Max for viewer-request
      AutoPublishAlias: live

  DistributionAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: iam:GetRole*
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-DistributionAuthorizerRole-*
              - Effect: Allow
                Action: dynamodb:GetItem
                Resource: !GetAtt JournalEntriesDDBTable.Arn
  #######################################################
  ##### Start of Custom functions #####
  #######################################################
  ValueFuncExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: apigateway:GET
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::/apikeys/${JournalEntryApiKey}
              # - Effect: Allow
              #   Action: apigateway:PUT
              #   Resource: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${JournalEntryApi}

  ValueFunc:
    Type: AWS::Lambda::Function
    Properties:
      # Environment:
      #   Variables:
      #     API_ENDPOINT: !Ref JournalEntryApiEndpoint
      # DependsOn:
      #   - !Ref CreateJournalEntryFunction
      #   - !Ref ReadJournalEntryFunction
      #   - !Ref UpdateJournalEntryFunction
      #   - !Ref DeleteJournalEntryFunction
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          # import os

          def lambda_handler(event, context):
            response_code = 200
            api_gateway_client = boto3.client('apigateway')
            api_key_id = event['ResourceProperties']['ApiKeyID']
            response = api_gateway_client.get_api_key(
              apiKey=api_key_id,
              includeValue=True
            )
            # api_endpoint = os.environ['API_ENDPOINT']

            responseValue = response['value']
            responseData = {}
            responseData['Data'] = responseValue
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID", noEcho=True)
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ValueFuncExecutionRole}"
  GetApiKeyValue:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken: !GetAtt ValueFunc.Arn
      ApiKeyID: !Ref JournalEntryApiKey

Outputs:
  DDBTableName:
    Value: !Ref JournalEntriesDDBTable
    Description: DDB Table
  WebsiteS3BucketName:
    Value: !Ref JournalWebsiteS3Bucket
    Description: Website S3 Bucket Name
  JournalEntryApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Journal CRUD operations"
    Value: !Sub "https://${JournalEntryApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/entries/"
  APIKeyValue:
    Description: "The actual API Key Value"
    Value: !GetAtt GetApiKeyValue.Data
